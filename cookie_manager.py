import os
import time
import pickle
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

# Define the path where the cookies will be saved (must match server.py)
COOKIES_FILE = os.path.join(os.getcwd(), "cookies.txt")

def generate_new_instagram_cookies(username, password):
    """
    Automates login to Instagram using Selenium, extracts cookies, 
    and saves them in the Netscape format expected by yt-dlp.
    
    Args:
        username (str): Instagram username.
        password (str): Instagram password.
    
    Returns:
        bool: True if cookies were successfully saved, False otherwise.
    """
    print("--- Attempting automated login to generate fresh cookies ---")
    
    # 1. Setup Chrome options for headless execution
    # Headless is generally better for server environments
    chrome_options = webdriver.ChromeOptions()
    chrome_options.add_argument("--headless")
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")
    
    # Initialize the WebDriver
    # Assuming the user has the necessary WebDriver executable configured in their PATH
    try:
        driver = webdriver.Chrome(options=chrome_options)
    except Exception as e:
        print(f"Error initializing WebDriver: {e}")
        print("Please ensure your Chrome WebDriver is installed and in your system PATH.")
        return False

    try:
        # 2. Navigate to the Instagram login page
        driver.get("https://www.instagram.com/accounts/login/")
        
        # Wait until the page loads and the username field is visible (max 20 seconds)
        wait = WebDriverWait(driver, 20)
        
        # Find the login form elements (names are stable)
        username_field = wait.until(EC.presence_of_element_located((By.NAME, "username")))
        password_field = driver.find_element(By.NAME, "password")
        
        # Fill credentials
        username_field.send_keys(username)
        password_field.send_keys(password)
        
        # Find and click the login button
        # The button often has a specific text or type='submit'
        login_button = driver.find_element(By.XPATH, "//button[@type='submit']")
        login_button.click()
        
        # 3. Wait for post-login page (e.g., the home feed or a profile page)
        # We wait until the URL changes from 'login' or a key element appears.
        # Instagram often shows a "Save Login Info?" prompt, we wait for that to pass.
        time.sleep(5) 
        
        # Check for successful login by verifying the URL
        if "login" in driver.current_url.lower():
            print("Login failed: URL did not change from login page.")
            return False
        
        print("Login successful. Extracting session cookies...")

        # 4. Extract all cookies
        selenium_cookies = driver.get_cookies()
        
        # 5. Convert Selenium cookies to Netscape format and save to cookies.txt
        # yt-dlp needs the Netscape format, which is manually crafted here.
        with open(COOKIES_FILE, "w") as f:
            f.write("# Netscape HTTP Cookie File\n")
            f.write("# This file was automatically generated by cookie_manager.py\n\n")
            
            for cookie in selenium_cookies:
                # We only care about Instagram cookies that are useful for authentication
                if "instagram.com" in cookie.get('domain', '') and 'sessionid' in cookie.get('name', '').lower():
                    # Format: domain, flag, path, secure, expiration, name, value
                    domain = cookie.get('domain').lstrip('.')
                    secure_flag = 'TRUE' if cookie.get('secure') else 'FALSE'
                    expiry = cookie.get('expiry', 0) # Use 0 if no expiry is set
                    
                    line = (
                        f".{domain}\tTRUE\t{cookie.get('path', '/')}\t"
                        f"{secure_flag}\t{expiry}\t"
                        f"{cookie['name']}\t{cookie['value']}\n"
                    )
                    f.write(line)

        print(f"Successfully saved fresh cookies to {COOKIES_FILE}")
        return True

    except Exception as e:
        print(f"An error occurred during cookie generation: {e}")
        return False
    
    finally:
        driver.quit() # Always close the browser
        print("--- Cookie generation finished ---")

if __name__ == "__main__":
    # Example usage when running standalone
    IG_USERNAME = os.environ.get("IG_USERNAME", "placeholder_user")
    IG_PASSWORD = os.environ.get("IG_PASSWORD", "placeholder_password")
    
    if IG_USERNAME == "placeholder_user":
        print("WARNING: IG_USERNAME environment variable not set. Using placeholder credentials.")
        print("Please set IG_USERNAME and IG_PASSWORD before deploying.")
    
    generate_new_instagram_cookies(IG_USERNAME, IG_PASSWORD)
